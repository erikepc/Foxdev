@{
    ViewData["Title"] = "Área do Convidado";
    var currentLives = (int)(ViewData["UserLives"] ?? 5);
    var lastRegenTimestampStr = ViewData["LastRegenTimestamp"] as string;
    var regenIntervalMinutes = (int)(ViewData["RegenIntervalMinutes"] ?? 5);
}

<link href="~/css/convidado.css" rel="stylesheet" />

<style>
/* Estilos modernos para a página do convidado */
.fundo {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    min-height: 100vh;
    font-family: 'Roboto', sans-serif;
}

.dark-theme .fundo {
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
}

/* Header modernizado */
.header-icons {
    animation: slideInFromLeft 0.8s ease-out;
}

.badge-custom {
    background: rgba(255, 255, 255, 0.9) !important;
    backdrop-filter: blur(10px) !important;
    border: 1px solid rgba(255, 107, 53, 0.2) !important;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1) !important;
    padding: 0.75rem 1rem !important;
    border-radius: 16px !important;
    transition: all 0.3s ease !important;
    color: #4a5568 !important;
    font-weight: 600 !important;
}

.badge-custom:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15) !important;
}

.dark-theme .badge-custom {
    background: rgba(26, 26, 46, 0.9) !important;
    border: 1px solid rgba(255, 255, 255, 0.1) !important;
    color: #cbd5e0 !important;
}

.badge-heart i {
    color: #ef4444 !important;
}

.badge-circle i {
    color: #3b82f6 !important;
}

.badge-sun i {
    color: #f59e0b !important;
}

/* Botões modernizados */
.btn-outline-green {
    background: rgba(255, 255, 255, 0.9) !important;
    border: 2px solid #22c55e !important;
    color: #22c55e !important;
    font-weight: 700 !important;
    padding: 0.75rem 1.5rem !important;
    border-radius: 50px !important;
    transition: all 0.3s ease !important;
    position: relative !important;
    overflow: hidden !important;
    backdrop-filter: blur(10px) !important;
}

.btn-outline-green::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #22c55e, #16a34a);
    transition: all 0.3s ease;
    z-index: -1;
}

.btn-outline-green:hover::before {
    left: 0;
}

.btn-outline-green:hover {
    color: white !important;
    border-color: transparent !important;
    transform: translateY(-2px) !important;
    box-shadow: 0 8px 25px rgba(34, 197, 94, 0.3) !important;
}

.btn-orange {
    background: linear-gradient(135deg, #F97316, #EA580C) !important;
    border: none !important;
    color: white !important;
    font-weight: 700 !important;
    padding: 0.75rem 1.5rem !important;
    border-radius: 50px !important;
    transition: all 0.3s ease !important;
    position: relative !important;
    overflow: hidden !important;
    box-shadow: 0 8px 25px rgba(249, 115, 22, 0.3) !important;
}

.btn-orange::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #EA580C, #DC2626);
    transition: all 0.3s ease;
    z-index: -1;
}

.btn-orange:hover::before {
    left: 0;
}

.btn-orange:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 12px 35px rgba(249, 115, 22, 0.4) !important;
}

/* Título de boas-vindas */
h2 {
    background: linear-gradient(135deg, #2d3748, #4a5568);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: slideInFromRight 0.8s ease-out;
}

.dark-theme h2 {
    background: linear-gradient(135deg, #e2e8f0, #cbd5e0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

/* Cards de curso modernizados */
.course-card {
    background: rgba(255, 255, 255, 0.9) !important;
    backdrop-filter: blur(20px) !important;
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    border-radius: 20px !important;
    padding: 1.5rem !important;
    transition: all 0.3s ease !important;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1) !important;
    position: relative !important;
    overflow: hidden !important;
}

.course-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(249, 115, 22, 0.05), rgba(234, 88, 12, 0.05));
    transition: all 0.3s ease;
    z-index: -1;
}

.course-card:hover::before {
    left: 0;
}

.course-card:hover {
    transform: translateY(-5px) !important;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15) !important;
    border-color: rgba(249, 115, 22, 0.3) !important;
}

.dark-theme .course-card {
    background: rgba(26, 26, 46, 0.9) !important;
    border: 1px solid rgba(255, 255, 255, 0.1) !important;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3) !important;
}

.course-cardd {
    background: rgba(255, 255, 255, 0.5) !important;
    backdrop-filter: blur(20px) !important;
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    border-radius: 20px !important;
    padding: 1.5rem !important;
    transition: all 0.3s ease !important;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05) !important;
    opacity: 0.7 !important;
}

.dark-theme .course-cardd {
    background: rgba(26, 26, 46, 0.5) !important;
    border: 1px solid rgba(255, 255, 255, 0.05) !important;
}

.course-title {
    color: #2d3748 !important;
    font-weight: 600 !important;
}

.dark-theme .course-title {
    color: #e2e8f0 !important;
}

.progress-circle {
    background: linear-gradient(135deg, #F97316, #EA580C) !important;
    color: white !important;
    border-radius: 50% !important;
    width: 50px !important;
    height: 50px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    font-weight: 700 !important;
    font-size: 0.875rem !important;
    box-shadow: 0 4px 15px rgba(249, 115, 22, 0.3) !important;
}

.lock-icon {
    color: #9ca3af !important;
    font-size: 1.25rem !important;
}

/* Animações de entrada */
@@keyframes slideInFromLeft {
    from {
        opacity: 0;
        transform: translateX(-30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@@keyframes slideInFromRight {
    from {
        opacity: 0;
        transform: translateX(30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.course-card,
.course-cardd {
    animation: fadeInUp 0.6s ease-out forwards;
}

.course-card:nth-child(1) { animation-delay: 0.1s; }
.course-card:nth-child(2) { animation-delay: 0.2s; }
.course-card:nth-child(3) { animation-delay: 0.3s; }
.course-card:nth-child(4) { animation-delay: 0.4s; }
.course-cardd { animation-delay: 0.5s; }

@@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Responsividade */
@@media (max-width: 768px) {
    .badge-custom {
        padding: 0.5rem 0.75rem !important;
        font-size: 0.875rem !important;
    }
    
    .btn-outline-green,
    .btn-orange {
        padding: 0.5rem 1rem !important;
        font-size: 0.875rem !important;
    }
    
    .course-card,
    .course-cardd {
        padding: 1rem !important;
    }
    
    h2 {
        font-size: 1.5rem !important;
    }
}
</style>

<body class="fundo">
  <header class="d-flex justify-content-between align-items-center px-3 px-sm-5 py-4 max-w-7xl mx-auto w-100">
   <div class="d-flex gap-3 header-icons">
    <div id="lives-badge" class="badge-custom badge-heart rounded" 
         data-bs-toggle="tooltip" 
         data-bs-placement="bottom" 
         title="Calculando...">  <!-- Tooltip inicial -->
     <i class="fas fa-heart"></i>
     <span id="lives-count">@currentLives</span>
    </div>
    <div class="badge-custom badge-circle rounded">
     <i class="fas fa-circle"></i>
     <span>80</span> <!-- Placeholder, ajustar se necessário -->
    </div>
    <div class="badge-custom badge-sun rounded">
     <i class="fas fa-sun"></i>
     <span>3</span> <!-- Placeholder, ajustar se necessário -->
    </div>
   </div>
   
  </header>
  <main class="container px-3 px-sm-0 mt-4">
    <section class="d-flex flex-column flex-sm-row align-items-start gap-3 mb-4 ">
      <h2 class="fw-bold text-nowrap">
        Bem-vindo, @ViewData["Nickname"]!
      </h2>
      <div class="d-flex gap-3 ms-auto">
        <button class="btn btn-outline-green" type="button">
          Entrar
        </button>
        <button class="btn btn-orange" type="button">
          Registrar-se
        </button>
        @if (!string.IsNullOrEmpty(ViewData["Nickname"] as string))
            {
                <div class="d-flex align-items-center">
                
                    <a asp-controller="Home" asp-action="SairDaSessao" class="btn btn-sm btn-outline-danger">Sair da Sessão</a>
                </div>
            }
      </div>
    </section>
    <section class="d-flex flex-column gap-3">
      <a asp-controller="Home" asp-action="Trilhas" class="course-card-link" style="text-decoration: none; color: inherit;">
        <article class="course-card">
          <div class="d-flex align-items-center gap-3">
            <img alt="Ícone Introdução à Lógica" height="40" src="~/img/logica.png" width="40" />
            <h3 class="course-title mb-0">
              Introdução à Lógica
            </h3>
          </div>
          <div class="progress-circle">
            0%
          </div>
        </article>
      </a>
      <article class="course-card">
        <div class="d-flex align-items-center gap-3">
          <img alt="Ícone HTML5" height="40" src="~/img/html5.png" width="40" />
          <h3 class="course-title mb-0">
            HTML5
          </h3>
        </div>
        <i class="fas fa-lock lock-icon"></i>
      </article>
      <article class="course-card">
        <div class="d-flex align-items-center gap-3">
          <img alt="Ícone CSS3" height="40" src="~/img/css3.png" width="40" />
          <h3 class="course-title mb-0">
            CSS3
          </h3>
        </div>
        <i class="fas fa-lock lock-icon"></i>
      </article>
      <article class="course-card">
        <div class="d-flex align-items-center gap-3">
          <img alt="Ícone React Native" height="40" src="~/img/react.png" width="40" />
          <h3 class="course-title mb-0">
            React Native
          </h3>
        </div>
        <i class="fas fa-lock lock-icon"></i>
      </article>
      <article class="course-cardd">
        <div class="d-flex align-items-center gap-3">
          <img alt="Ícone Em Breve" height="40" src="~/img/breve.png" width="40" style="opacity: 0.5;" />
          <h3 class="course-title mb-0">
            Em Breve..
          </h3>
        </div>
        <i class="fas fa-lock lock-icon"></i>
      </article>
    </section>
  </main>
  <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
  </script>  
  
  <!-- Script para inicializar os tooltips e atualizar o timer de vidas -->
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const livesBadge = document.getElementById("lives-badge");
      const livesCountSpan = document.getElementById("lives-count");
      const currentLives = parseInt(livesCountSpan.textContent);
      const lastRegenTimestampStr = "@lastRegenTimestampStr";
      const regenIntervalMinutes = @regenIntervalMinutes;
      let timerInterval = null;

      // Inicializa o tooltip
      const tooltip = new bootstrap.Tooltip(livesBadge);

      function updateTooltipTimer() {
        if (currentLives >= 5) {
          livesBadge.setAttribute("data-bs-original-title", "Vidas cheias");
          tooltip.setContent({ ".tooltip-inner": "Vidas cheias" }); // Atualiza o conteúdo se já estiver visível
          if (timerInterval) clearInterval(timerInterval);
          return;
        }

        try {
          const lastRegenTime = new Date(lastRegenTimestampStr);
          const now = new Date();
          const nextRegenTime = new Date(lastRegenTime.getTime() + regenIntervalMinutes * 60 * 1000);
          
          const diffSeconds = Math.max(0, Math.floor((nextRegenTime - now) / 1000));
          
          if (diffSeconds <= 0) {
            // O tempo acabou, idealmente deveria recarregar ou atualizar via AJAX
            // Por agora, apenas mostra que está regenerando e para o timer.
            livesBadge.setAttribute("data-bs-original-title", "Regenerando...");
            tooltip.setContent({ ".tooltip-inner": "Regenerando..." });
            if (timerInterval) clearInterval(timerInterval);
            // Poderia adicionar um setTimeout para recarregar a página: setTimeout(() => location.reload(), 1500);
          } else {
            const minutes = Math.floor(diffSeconds / 60);
            const seconds = diffSeconds % 60;
            const timeString = `Próxima vida em ${minutes}m ${seconds}s`;
            livesBadge.setAttribute("data-bs-original-title", timeString);
            tooltip.setContent({ ".tooltip-inner": timeString }); // Atualiza o conteúdo se já estiver visível
          }
        } catch (e) {
          console.error("Erro ao calcular tempo de regeneração:", e);
          livesBadge.setAttribute("data-bs-original-title", "Erro no cálculo");
          tooltip.setContent({ ".tooltip-inner": "Erro no cálculo" });
          if (timerInterval) clearInterval(timerInterval);
        }
      }

      // Atualiza o timer imediatamente e depois a cada segundo
      updateTooltipTimer(); 
      if (currentLives < 5) {
          timerInterval = setInterval(updateTooltipTimer, 1000);
      }
      
      // Limpa o intervalo quando a página for descarregada (boa prática)
      window.addEventListener("beforeunload", () => {
          if (timerInterval) clearInterval(timerInterval);
      });
    });
  </script>
</body>

