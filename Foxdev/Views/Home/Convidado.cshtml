@{
    ViewData["Title"] = "Área do Convidado";
    var currentLives = (int)(ViewData["UserLives"] ?? 5);
    var lastRegenTimestampStr = ViewData["LastRegenTimestamp"] as string;
    var regenIntervalMinutes = (int)(ViewData["RegenIntervalMinutes"] ?? 5);
}

<link href="~/css/convidado.css" rel="stylesheet" />

<body class="fundo">
  <header class="d-flex justify-content-between align-items-center px-3 px-sm-5 py-4 max-w-7xl mx-auto w-100">
   <div class="d-flex gap-3 header-icons">
    <div id="lives-badge" class="badge-custom badge-heart rounded" 
         data-bs-toggle="tooltip" 
         data-bs-placement="bottom" 
         title="Calculando...">  <!-- Tooltip inicial -->
     <i class="fas fa-heart"></i>
     <span id="lives-count">@currentLives</span>
    </div>
    <div class="badge-custom badge-circle rounded">
     <i class="fas fa-circle"></i>
     <span>80</span> <!-- Placeholder, ajustar se necessário -->
    </div>
    <div class="badge-custom badge-sun rounded">
     <i class="fas fa-sun"></i>
     <span>3</span> <!-- Placeholder, ajustar se necessário -->
    </div>
   </div>
   
  </header>
  <main class="container px-3 px-sm-0 mt-4">
    <section class="d-flex flex-column flex-sm-row align-items-start gap-3 mb-4 ">
      <h2 class="fw-bold text-nowrap">
        Bem-vindo, @ViewData["Nickname"]!
      </h2>
      <div class="d-flex gap-3 ms-auto">
        <button class="btn btn-outline-green" type="button">
          Entrar
        </button>
        <button class="btn btn-orange" type="button">
          Registrar-se
        </button>
        @if (!string.IsNullOrEmpty(ViewData["Nickname"] as string))
            {
                <div class="d-flex align-items-center">
                
                    <a asp-controller="Home" asp-action="SairDaSessao" class="btn btn-sm btn-outline-danger">Sair da Sessão</a>
                </div>
            }
      </div>
    </section>
    <section class="d-flex flex-column gap-3">
      <a asp-controller="Home" asp-action="Trilhas" class="course-card-link" style="text-decoration: none; color: inherit;">
        <article class="course-card">
          <div class="d-flex align-items-center gap-3">
            <img alt="Ícone Introdução à Lógica" height="40" src="~/img/logica.png" width="40" />
            <h3 class="course-title mb-0">
              Introdução à Lógica
            </h3>
          </div>
          <div class="progress-circle">
            0%
          </div>
        </article>
      </a>
      <article class="course-card">
        <div class="d-flex align-items-center gap-3">
          <img alt="Ícone HTML5" height="40" src="~/img/html5.png" width="40" />
          <h3 class="course-title mb-0">
            HTML5
          </h3>
        </div>
        <i class="fas fa-lock lock-icon"></i>
      </article>
      <article class="course-card">
        <div class="d-flex align-items-center gap-3">
          <img alt="Ícone CSS3" height="40" src="~/img/css3.png" width="40" />
          <h3 class="course-title mb-0">
            CSS3
          </h3>
        </div>
        <i class="fas fa-lock lock-icon"></i>
      </article>
      <article class="course-card">
        <div class="d-flex align-items-center gap-3">
          <img alt="Ícone React Native" height="40" src="~/img/react.png" width="40" />
          <h3 class="course-title mb-0">
            React Native
          </h3>
        </div>
        <i class="fas fa-lock lock-icon"></i>
      </article>
      <article class="course-cardd">
        <div class="d-flex align-items-center gap-3">
          <img alt="Ícone Em Breve" height="40" src="~/img/breve.png" width="40" style="opacity: 0.5;" />
          <h3 class="course-title mb-0">
            Em Breve..
          </h3>
        </div>
        <i class="fas fa-lock lock-icon"></i>
      </article>
    </section>
  </main>
  <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
  </script>  
  
  <!-- Script para inicializar os tooltips e atualizar o timer de vidas -->
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const livesBadge = document.getElementById("lives-badge");
      const livesCountSpan = document.getElementById("lives-count");
      const currentLives = parseInt(livesCountSpan.textContent);
      const lastRegenTimestampStr = "@lastRegenTimestampStr";
      const regenIntervalMinutes = @regenIntervalMinutes;
      let timerInterval = null;

      // Inicializa o tooltip
      const tooltip = new bootstrap.Tooltip(livesBadge);

      function updateTooltipTimer() {
        if (currentLives >= 5) {
          livesBadge.setAttribute("data-bs-original-title", "Vidas cheias");
          tooltip.setContent({ ".tooltip-inner": "Vidas cheias" }); // Atualiza o conteúdo se já estiver visível
          if (timerInterval) clearInterval(timerInterval);
          return;
        }

        try {
          const lastRegenTime = new Date(lastRegenTimestampStr);
          const now = new Date();
          const nextRegenTime = new Date(lastRegenTime.getTime() + regenIntervalMinutes * 60 * 1000);
          
          const diffSeconds = Math.max(0, Math.floor((nextRegenTime - now) / 1000));
          
          if (diffSeconds <= 0) {
            // O tempo acabou, idealmente deveria recarregar ou atualizar via AJAX
            // Por agora, apenas mostra que está regenerando e para o timer.
            livesBadge.setAttribute("data-bs-original-title", "Regenerando...");
            tooltip.setContent({ ".tooltip-inner": "Regenerando..." });
            if (timerInterval) clearInterval(timerInterval);
            // Poderia adicionar um setTimeout para recarregar a página: setTimeout(() => location.reload(), 1500);
          } else {
            const minutes = Math.floor(diffSeconds / 60);
            const seconds = diffSeconds % 60;
            const timeString = `Próxima vida em ${minutes}m ${seconds}s`;
            livesBadge.setAttribute("data-bs-original-title", timeString);
            tooltip.setContent({ ".tooltip-inner": timeString }); // Atualiza o conteúdo se já estiver visível
          }
        } catch (e) {
          console.error("Erro ao calcular tempo de regeneração:", e);
          livesBadge.setAttribute("data-bs-original-title", "Erro no cálculo");
          tooltip.setContent({ ".tooltip-inner": "Erro no cálculo" });
          if (timerInterval) clearInterval(timerInterval);
        }
      }

      // Atualiza o timer imediatamente e depois a cada segundo
      updateTooltipTimer(); 
      if (currentLives < 5) {
          timerInterval = setInterval(updateTooltipTimer, 1000);
      }
      
      // Limpa o intervalo quando a página for descarregada (boa prática)
      window.addEventListener("beforeunload", () => {
          if (timerInterval) clearInterval(timerInterval);
      });
    });
  </script>
</body>

