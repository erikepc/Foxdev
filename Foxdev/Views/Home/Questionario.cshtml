@using Foxdev.Models
@{
    ViewData["Title"] = "Questionário";
    var nomeLicao = ViewData["NomeLicao"] as string ?? "Lição";
    var licaoId = ViewData["LicaoId"] ?? 0; 
    var explicacao = ViewData["Explicacao"] as string ?? "Explicação não disponível para esta lição.";
    var questoesDaLicao = ViewData["Questoes"] as List<Questao> ?? new List<Questao>();
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - @nomeLicao - Foxdev</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/css/questionario.css" rel="stylesheet" />
</head>
<body class="fundo">
    <div class="container questionario-container mt-4 mb-5">
        <div class="progress-bar-container mb-3">
            <div class="progress">
                <div id="questionProgress" class="progress-bar bg-success" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>

        <h2 class="text-center mb-4">Lição: @nomeLicao</h2>

        @if (!questoesDaLicao.Any())
        {
            <p class="text-center">Nenhuma questão encontrada para esta lição (ID: @licaoId).</p>
            <div class="text-center mt-4">
                 <a href="@Url.Action("Trilhas", "Home")" class="btn btn-primary">Voltar para Trilhas</a>
            </div>
        }
        else
        {
            <div id="explicacaoArea" class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Introdução à Lição</h4>
                </div>
                <div class="card-body">
                    <p>@explicacao</p>
                    <div class="text-center mt-4">
                        <button id="iniciarQuestionarioBtn" class="btn btn-lg btn-success">Iniciar Questionário</button>
                    </div>
                </div>
            </div>

            <div id="questionArea" style="display: none;">
               
            </div>

            <div id="feedbackArea" class="mt-3" style="display: none;">
                <p id="feedbackText" class="fw-bold"></p>
            </div>

            <div class="navigation-buttons mt-4 d-flex justify-content-between" style="display: none;">
                <button id="skipButton" class="btn btn-secondary" style="display: none;">Pular</button>
                <button id="checkButton" class="btn btn-success">Verificar</button>
                <button id="nextButton" class="btn btn-primary" style="display: none;">Continuar</button>
            </div>
        }
    </div>

    <script>
        const questoes = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(questoesDaLicao));
        const licaoIdParaScript = @Convert.ToInt32(licaoId);
        let currentQuestionIndex = 0;
        let score = 0; 
        let selectedAnswer = null;

        const explicacaoArea = document.getElementById("explicacaoArea");
        const iniciarQuestionarioBtn = document.getElementById("iniciarQuestionarioBtn");
        const questionArea = document.getElementById("questionArea");
        const feedbackArea = document.getElementById("feedbackArea");
        const feedbackText = document.getElementById("feedbackText");
        const checkButton = document.getElementById("checkButton");
        const nextButton = document.getElementById("nextButton");
        const skipButton = document.getElementById("skipButton"); 
        const questionProgress = document.getElementById("questionProgress");
        const navigationButtons = document.querySelector(".navigation-buttons");

        // Iniciar questionário quando o botão for clicado
        iniciarQuestionarioBtn.addEventListener("click", function() {
            explicacaoArea.style.display = "none";
            questionArea.style.display = "block";
            navigationButtons.style.display = "flex";
            loadQuestion(currentQuestionIndex);
        });

        function loadQuestion(index) {
            selectedAnswer = null;
            const q = questoes[index];
            questionArea.innerHTML = `
                <h4>${q.Enunciado}</h4>
                <ul class="list-group mt-3">
                    <li class="list-group-item answer-option" data-value="A">A) ${q.RespostaA}</li>
                    <li class="list-group-item answer-option" data-value="B">B) ${q.RespostaB}</li>
                    <li class="list-group-item answer-option" data-value="C">C) ${q.RespostaC}</li>
                    <li class="list-group-item answer-option" data-value="D">D) ${q.RespostaD}</li>
                </ul>
            `;
            document.querySelectorAll(".answer-option").forEach(option => {
                option.addEventListener("click", function() {
                    if (checkButton.style.display !== "none") { 
                        document.querySelectorAll(".answer-option").forEach(opt => opt.classList.remove("active"));
                        this.classList.add("active");
                        selectedAnswer = this.dataset.value;
                    }
                });
            });
            updateProgress();
            feedbackArea.style.display = "none";
            checkButton.style.display = "block";
            nextButton.style.display = "none";
            checkButton.disabled = false;
        }

        function updateProgress() {
            const progressPercentage = ((currentQuestionIndex) / questoes.length) * 100;
            questionProgress.style.width = progressPercentage + "%";
            questionProgress.setAttribute("aria-valuenow", progressPercentage);
        }

        checkButton.addEventListener("click", function() {
            if (selectedAnswer === null) {
                alert("Por favor, selecione uma resposta.");
                return;
            }
            this.disabled = true;
            const correctAnswer = questoes[currentQuestionIndex].RespostaCorreta;
            const options = document.querySelectorAll(".answer-option");
            options.forEach(option => {
                option.classList.remove("active");
                if (option.dataset.value === correctAnswer) {
                    option.classList.add("list-group-item-success");
                }
                if (option.dataset.value === selectedAnswer && selectedAnswer !== correctAnswer) {
                    option.classList.add("list-group-item-danger");
                }
                option.style.pointerEvents = "none";
            });
            if (selectedAnswer === correctAnswer) {
                feedbackText.textContent = "Correto!";
                feedbackText.className = "fw-bold text-success";
                score++; 
            }
            else {
                feedbackText.textContent = `Incorreto. A resposta correta era: ${correctAnswer}`;
                feedbackText.className = "fw-bold text-danger";
            }
            feedbackArea.style.display = "block";
            checkButton.style.display = "none";
            nextButton.style.display = "block";
        });

        nextButton.addEventListener("click", function() {
            currentQuestionIndex++;
            if (currentQuestionIndex < questoes.length) {
                loadQuestion(currentQuestionIndex);
            }
            else {
                var pontuacaoFinalObtida = score * 100; 
                var totalQuestoesNoQuiz = questoes.length;

    
                const dadosResultado = {
                    licaoId: licaoIdParaScript,
                    scoreObtido: pontuacaoFinalObtida,
                    totalQuestoes: totalQuestoesNoQuiz
                };
                
                questionArea.innerHTML = `<p class="text-center">Salvando seu progresso...</p>`;
                feedbackArea.style.display = "none";
                checkButton.style.display = "none";
                nextButton.style.display = "none";
                skipButton.style.display = "none";

                fetch("@Url.Action("ProcessarRespostas", "Home")", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                       
                    },
                    body: JSON.stringify(dadosResultado)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        questionArea.innerHTML = `
                            <h3 class="text-center">Questionário Concluído!</h3>
                            <p class="text-center">Você fez ${pontuacaoFinalObtida} pontos (${score} de ${totalQuestoesNoQuiz} questões corretas).</p>
                            <p class="text-center">${data.message}</p>
                            <p class="text-center">Vidas restantes: <span class="text-danger"><i class="fas fa-heart"></i> ${data.currentLives}</span></p>
                            <div class="text-center mt-4">
                                 <a href="@Url.Action("Trilhas", "Home")" class="btn btn-primary">Voltar para Trilhas</a>
                            </div>
                        `;
                    }
                    else {
                        questionArea.innerHTML = `
                            <h3 class="text-center text-danger">Erro ao Salvar!</h3>
                            <p class="text-center">Ocorreu um erro ao salvar seu progresso: ${data.message}</p>
                            <p class="text-center">Sua pontuação foi: ${pontuacaoFinalObtida} pontos (${score} de ${totalQuestoesNoQuiz} questões corretas).</p>
                            <div class="text-center mt-4">
                                 <a href="@Url.Action("Trilhas", "Home")" class="btn btn-warning">Voltar para Trilhas (Progresso não salvo)</a>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error("Erro na requisição AJAX:", error);
                    questionArea.innerHTML = `
                        <h3 class="text-center text-danger">Erro de Conexão!</h3>
                        <p class="text-center">Não foi possível conectar ao servidor para salvar seu progresso.</p>
                        <p class="text-center">Sua pontuação foi: ${pontuacaoFinalObtida} pontos (${score} de ${totalQuestoesNoQuiz} questões corretas).</p>
                        <div class="text-center mt-4">
                             <a href="@Url.Action("Trilhas", "Home")" class="btn btn-warning">Voltar para Trilhas (Progresso não salvo)</a>
                        </div>
                    `;
                })
                .finally(() => {
                    const finalProgress = 100;
                    questionProgress.style.width = finalProgress + "%";
                    questionProgress.setAttribute("aria-valuenow", finalProgress);
                    questionProgress.textContent = "Completo!";
                });
            }
        });

        if (questoes && questoes.length > 0) {
            loadQuestion(currentQuestionIndex);
        }

    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

