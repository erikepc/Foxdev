// <auto-generated />
using System;
using Foxdev.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Foxdev.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250527225312_AddIconToLicao")]
    partial class AddIconToLicao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Foxdev.Models.Licao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Explicacao")
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ModuloId");

                    b.ToTable("Licaos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Explicacao = "Nesta lição, você aprenderá sobre variáveis, que são espaços na memória do computador usados para armazenar dados. Variáveis são fundamentais na programação, pois permitem que os programas armazenem e manipulem informações. Você aprenderá como declarar variáveis, atribuir valores a elas e utilizá-las em operações básicas.",
                            Icon = "fas fa-lightbulb",
                            ModuloId = 1,
                            Titulo = "Introdução a Variáveis"
                        },
                        new
                        {
                            Id = 2,
                            Explicacao = "Esta lição aborda os diferentes tipos de dados que podem ser armazenados em variáveis, como números inteiros, números decimais, texto (strings) e valores booleanos (verdadeiro/falso). Compreender os tipos de dados é essencial para manipular informações corretamente em seus programas.",
                            Icon = "fas fa-database",
                            ModuloId = 1,
                            Titulo = "Tipos de Dados Básicos"
                        },
                        new
                        {
                            Id = 3,
                            Explicacao = "Nesta lição, você aprenderá sobre os operadores que permitem realizar cálculos matemáticos (como adição, subtração, multiplicação e divisão) e operações lógicas (como comparações de igualdade, maior que, menor que). Esses operadores são essenciais para criar programas que tomam decisões e processam dados.",
                            Icon = "fas fa-calculator",
                            ModuloId = 1,
                            Titulo = "Operadores Aritméticos e Lógicos"
                        },
                        new
                        {
                            Id = 4,
                            Explicacao = "As estruturas condicionais permitem que seu programa tome decisões baseadas em condições. Nesta lição, você aprenderá a usar comandos IF e ELSE para criar fluxos de execução diferentes dependendo de certas condições serem verdadeiras ou falsas.",
                            Icon = "fas fa-code-branch",
                            ModuloId = 1,
                            Titulo = "Estruturas Condicionais (IF/ELSE)"
                        },
                        new
                        {
                            Id = 5,
                            Explicacao = "Os laços de repetição permitem executar um bloco de código múltiplas vezes. Nesta lição, você aprenderá sobre os laços FOR e WHILE, que são fundamentais para automatizar tarefas repetitivas e processar conjuntos de dados.",
                            Icon = "fas fa-sync-alt",
                            ModuloId = 1,
                            Titulo = "Laços de Repetição (FOR/WHILE)"
                        },
                        new
                        {
                            Id = 6,
                            Explicacao = "Arrays e listas são estruturas de dados que permitem armazenar múltiplos valores em uma única variável. Nesta lição, você aprenderá como criar, acessar e manipular essas estruturas, que são essenciais para trabalhar com conjuntos de dados.",
                            Icon = "fas fa-list-ol",
                            ModuloId = 1,
                            Titulo = "Introdução a Arrays/Listas"
                        },
                        new
                        {
                            Id = 7,
                            Explicacao = "Funções são blocos de código reutilizáveis que executam tarefas específicas. Nesta lição, você aprenderá a criar funções, passar parâmetros para elas e retornar valores, permitindo que você organize seu código de forma mais eficiente.",
                            Icon = "fas fa-cogs",
                            ModuloId = 1,
                            Titulo = "Funções e Parâmetros"
                        },
                        new
                        {
                            Id = 8,
                            Explicacao = "A depuração é o processo de encontrar e corrigir erros em seu código. Nesta lição, você aprenderá técnicas e ferramentas para identificar problemas, entender mensagens de erro e corrigir bugs em seus programas.",
                            Icon = "fas fa-bug",
                            ModuloId = 1,
                            Titulo = "Depuração de Código"
                        },
                        new
                        {
                            Id = 9,
                            Explicacao = "O pseudocódigo é uma forma de planejar seu programa usando linguagem natural antes de escrever o código real. Nesta lição, você aprenderá como usar o pseudocódigo para planejar a lógica do seu programa e facilitar o processo de desenvolvimento.",
                            Icon = "fas fa-file-alt",
                            ModuloId = 1,
                            Titulo = "Pseudocódigo e Planejamento"
                        },
                        new
                        {
                            Id = 10,
                            Explicacao = "Fluxogramas são representações visuais da lógica de um programa. Nesta lição, você aprenderá a criar e interpretar fluxogramas, que são ferramentas poderosas para visualizar e planejar o fluxo de execução de seus programas.",
                            Icon = "fas fa-project-diagram",
                            ModuloId = 1,
                            Titulo = "Fluxogramas e Lógica Visual"
                        });
                });

            modelBuilder.Entity("Foxdev.Models.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("modulo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Titulo = "Lógica de Programação"
                        },
                        new
                        {
                            Id = 2,
                            Titulo = "Introdução ao Frontend"
                        },
                        new
                        {
                            Id = 3,
                            Titulo = "Introdução ao Backend"
                        });
                });

            modelBuilder.Entity("Foxdev.Models.Questao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("LicaoId")
                        .HasColumnType("int");

                    b.Property<string>("RespostaA")
                        .HasColumnType("longtext");

                    b.Property<string>("RespostaB")
                        .HasColumnType("longtext");

                    b.Property<string>("RespostaC")
                        .HasColumnType("longtext");

                    b.Property<string>("RespostaCorreta")
                        .HasColumnType("longtext");

                    b.Property<string>("RespostaD")
                        .HasColumnType("longtext");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicaoId");

                    b.ToTable("Questaos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enunciado = "O que é uma variável?",
                            LicaoId = 1,
                            RespostaA = "Um valor fixo que não pode ser alterado",
                            RespostaB = "Um container para armazenar dados",
                            RespostaC = "Um tipo de operador matemático",
                            RespostaCorreta = "B",
                            RespostaD = "Um erro de sintaxe",
                            Tipo = 0
                        },
                        new
                        {
                            Id = 2,
                            Enunciado = "Como declarar uma variável em pseudocódigo?",
                            LicaoId = 1,
                            RespostaA = "var nome = valor",
                            RespostaB = "variable nome = valor",
                            RespostaC = "nome : valor",
                            RespostaCorreta = "A",
                            RespostaD = "def nome(valor)",
                            Tipo = 0
                        },
                        new
                        {
                            Id = 3,
                            Enunciado = "Qual é o propósito de usar variáveis?",
                            LicaoId = 1,
                            RespostaA = "Executar operações matemáticas",
                            RespostaB = "Armazenar e reutilizar dados",
                            RespostaC = "Definir cores em interfaces",
                            RespostaCorreta = "B",
                            RespostaD = "Criar laços de repetição",
                            Tipo = 0
                        },
                        new
                        {
                            Id = 4,
                            Enunciado = "Qual operador é usado para atribuir valor a uma variável?",
                            LicaoId = 1,
                            RespostaA = "==",
                            RespostaB = "=",
                            RespostaC = "=>",
                            RespostaCorreta = "B",
                            RespostaD = "<-",
                            Tipo = 0
                        },
                        new
                        {
                            Id = 5,
                            Enunciado = "Qual afirmação é verdadeira sobre variáveis?",
                            LicaoId = 1,
                            RespostaA = "Não podem ser modificadas após a criação",
                            RespostaB = "Podem mudar de valor durante a execução",
                            RespostaC = "São sempre números",
                            RespostaCorreta = "B",
                            RespostaD = "São obrigatórias apenas em loops",
                            Tipo = 0
                        },
                        new
                        {
                            Id = 6,
                            Enunciado = "O que é uma variavel int?",
                            LicaoId = 2,
                            RespostaA = "Não podem ser modificadas após a criação",
                            RespostaB = "somente contem numeros",
                            RespostaC = "São sempre números",
                            RespostaCorreta = "B",
                            RespostaD = "São obrigatórias apenas em loops",
                            Tipo = 0
                        },
                        new
                        {
                            Id = 7,
                            Enunciado = "O que é uma variavel int?",
                            LicaoId = 3,
                            RespostaA = "Não podem ser modificadas após a criação",
                            RespostaB = "somente contem numeros",
                            RespostaC = "São sempre números",
                            RespostaCorreta = "B",
                            RespostaD = "São obrigatórias apenas em loops",
                            Tipo = 0
                        });
                });

            modelBuilder.Entity("Foxdev.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("perfil", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("perfil_regra", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("usuario_regra", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("usuario_login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("usuario_perfil", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("usuario_token", (string)null);
                });

            modelBuilder.Entity("Foxdev.Models.Licao", b =>
                {
                    b.HasOne("Foxdev.Models.Modulo", "Modulo")
                        .WithMany("Licoes")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("Foxdev.Models.Questao", b =>
                {
                    b.HasOne("Foxdev.Models.Licao", "Licao")
                        .WithMany("Questaos")
                        .HasForeignKey("LicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Foxdev.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Foxdev.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foxdev.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Foxdev.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foxdev.Models.Licao", b =>
                {
                    b.Navigation("Questaos");
                });

            modelBuilder.Entity("Foxdev.Models.Modulo", b =>
                {
                    b.Navigation("Licoes");
                });
#pragma warning restore 612, 618
        }
    }
}
